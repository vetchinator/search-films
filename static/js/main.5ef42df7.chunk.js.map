{"version":3,"sources":["reportWebVitals.js","components/Header/Header.tsx","api/api.ts","redux/movies-reducer.ts","redux/redux-store.ts","redux/movies-selector.ts","components/common/Preloader/Preloader.tsx","components/CharacterRow/CharacterRow.tsx","components/StyledComponets/StyledComponents.ts","components/Movies/Movie.tsx","components/Search/SearchForm.tsx","components/Movies/Movies.tsx","components/Footer/Footer.tsx","components/Movies/MovieFullDescription.tsx","components/StyledComponets/GlobalStyle.ts","App.tsx","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","HeaderContainer","styled","header","Header","apikey","instance","axios","create","baseURL","API","title","type","year","currentPage","get","response","data","id","initialState","loading","movies","errorMessage","totalCountMovies","filter","filmDescription","actions","error","totalResults","page","getFilms","dispatch","a","Response","Search","Error","moviesReducer","state","action","rootReducer","combineReducers","moviesPage","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","getTotalCountMovies","getMovies","getfilter","getCurrentPage","getErrorMessage","selectFilmDescription","selectLoading","PreloaderContainer","div","Preloader","props","antIcon","LoadingOutlined","style","fontSize","spin","indicator","Row","Title","Value","CharacterRow","value","Container","BodyContainer","ErrorMessage","Poster","img","margin","MovieContainer","Movie","movie","to","imdbID","src","alt","width","marginTop","Type","Year","React","memo","Option","Select","SearchForm","useDispatch","useSelector","Form","useForm","form","useEffect","setFieldsValue","onFinish","values","initialValues","Group","compact","Item","name","maxWidth","rules","required","message","placeholder","pattern","htmlType","MoviesWrapper","Movies","history","useHistory","parsed","queryString","location","search","substr","actualPage","actualFilter","Number","query","String","push","map","v1","showQuickJumper","current","defaultCurrent","onChange","total","pageSize","pageSizeOptions","FooterContainer","footer","Footer","href","target","rel","MovieFullDescription","pathname","getFilmDescription","onClick","goBack","LeftOutlined","Country","Genre","Writer","Director","Production","Actors","Language","Awards","Metascore","Released","DVD","BoxOffice","Rated","Website","Plot","imdbRating","imdbVotes","Runtime","Ratings","rating","Source","GlobalStyle","createGlobalStyle","App","exact","path","render","MainApp","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.5ef42df7.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\r\nimport styled from 'styled-components/macro';\r\n\r\nconst HeaderContainer = styled.header`\r\n    text-align: center;\r\n    color: #0f135e;\r\n    background-color: black;\r\n\r\n    & h1 {\r\n        margin: 0;\r\n        color: aliceblue;\r\n    }\r\n    \r\n`;\r\n\r\nconst Header: React.FC = () => {\r\n    return (\r\n        <HeaderContainer>\r\n            <h1>Search movies</h1>\r\n        </HeaderContainer>\r\n    )\r\n}\r\n\r\nexport default Header;","import { FilterType } from './../types/type';\r\nimport axios from 'axios';\r\n\r\nconst apikey = '69a7f601';\r\n\r\nexport const instance = axios.create({\r\n    baseURL: \"https://www.omdbapi.com/\",\r\n});\r\n\r\nexport const API = {\r\n    async getFilms({title, type, year}: FilterType, currentPage=1) {\r\n        const response = await instance.get(`?apikey=${apikey}&s=${title}&type=${type}&y=${year}&page=${currentPage}`);\r\n        return response.data;\r\n    },\r\n    async getFilmDescription(id: string) {\r\n        const response = await instance.get(`?apikey=${apikey}&i=${id}&plot=full`);\r\n        return response.data;\r\n    },\r\n}","import { FilterType } from './../types/type';\r\nimport { ThunkAction } from 'redux-thunk';\r\nimport { InferActionsTypes, RootState } from './redux-store';\r\nimport { API } from '../api/api';\r\nimport { movieType } from '../types/type';\r\n\r\nexport type InitialStateType = typeof initialState;\r\ntype ActionTypes = InferActionsTypes<typeof actions>;\r\ntype ThunkType = ThunkAction<Promise<void>, RootState, unknown, ActionTypes>;\r\n\r\nlet initialState = {\r\n    loading: false,\r\n    movies: null as Array<movieType> | null ,\r\n    errorMessage: null as string | null,\r\n    totalCountMovies: '',\r\n    currentPage: 1,\r\n    filter: {\r\n        title: '',\r\n        year: '',\r\n        type: '',  \r\n    } as FilterType,\r\n    filmDescription: {} as any\r\n\r\n};\r\n\r\nconst moviesReducer = (state = initialState, action: ActionTypes): InitialStateType=> {\r\n    switch (action.type) {\r\n        case 'sm/SEARCH_REQUEST': {\r\n            return { ...state, loading: true }\r\n        }\r\n        case 'sm/SEARCH_REQUEST_SUCCESS': {\r\n            return { ...state, movies: action.movies, errorMessage: null, loading: false}\r\n        }\r\n        case 'sm/SEARCH_REQUEST_ERROR': {\r\n            return { ...state, loading: false, errorMessage: action.error }\r\n        }\r\n        case 'sm/SET_TOTAL_COUNT_MOVIES': {\r\n            return { ...state, totalCountMovies: action.totalResults }\r\n        }\r\n        case 'sm/SET_CURRENT_PAGE': {\r\n            return { ...state, currentPage: action.page }\r\n        }\r\n        case 'sm/SET_FILTER': {\r\n            return { ...state, filter: action.filter }\r\n        }\r\n        case 'sm/SET_FILM_DESCRIPTION': {\r\n            return { ...state, filmDescription: action.filmDescription }\r\n        }\r\n        case 'sm/CLEAR_FILM_DESCRIPTION': {\r\n            return { ...state, filmDescription: null }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const actions = {\r\n    searchRequest: () => ({ type: \"sm/SEARCH_REQUEST\" } as const), \r\n    searchRequestSuccess: (movies: Array<movieType> | null) => ({ type: \"sm/SEARCH_REQUEST_SUCCESS\", movies } as const), \r\n    searchRequestError: (error: string | null) => ({ type: \"sm/SEARCH_REQUEST_ERROR\", error } as const), \r\n    setTotalCountMovies: (totalResults: string) => ({ type: \"sm/SET_TOTAL_COUNT_MOVIES\", totalResults} as const),\r\n    setCurrentPage: (page: number) => ({ type: \"sm/SET_CURRENT_PAGE\", page} as const),\r\n    setFilter: (filter: FilterType) => ({ type: \"sm/SET_FILTER\", filter} as const),\r\n    setFilmDescription: (filmDescription: any) => ({ type: \"sm/SET_FILM_DESCRIPTION\", filmDescription} as const),\r\n    clearFilmDescription: () => ({ type: \"sm/CLEAR_FILM_DESCRIPTION\"} as const),\r\n}\r\n\r\nexport const getFilms =\r\n    (filter: FilterType, page: number): ThunkType =>\r\n    async (dispatch) => {\r\n        dispatch(actions.searchRequestSuccess(null));\r\n        dispatch(actions.searchRequest());\r\n        dispatch(actions.setCurrentPage(page));\r\n        dispatch(actions.setFilter(filter));\r\n\r\n        let data = await API.getFilms(filter, page);\r\n        if (data.Response === \"True\") {\r\n            dispatch(actions.searchRequestSuccess(data.Search));\r\n            dispatch(actions.setTotalCountMovies(data.totalResults));\r\n        } else {\r\n            dispatch(actions.searchRequestError(data.Error));\r\n        }\r\n    };\r\nexport const getFilmDescription =\r\n    (id: string): ThunkType =>\r\n    async (dispatch) => {\r\n        dispatch(actions.setFilmDescription(''));\r\n        let data = await API.getFilmDescription(id);\r\n        if (data.Response === 'True') {\r\n            dispatch(actions.setFilmDescription(data));\r\n        } else {\r\n            dispatch(actions.searchRequestError(data.Error));\r\n        }\r\n    };\r\n\r\nexport default moviesReducer;\r\n","import { combineReducers, createStore, applyMiddleware, compose } from 'redux';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport moviesReducer from './movies-reducer';\r\n\r\n\r\nlet rootReducer = combineReducers({ \r\n    moviesPage: moviesReducer,\r\n})\r\n\r\nexport type AppDispatch = typeof store.dispatch;\r\nexport type RootState = ReturnType<typeof rootReducer>;\r\nexport type InferActionsTypes<T> = T extends { [keys: string]: (...args: any[]) => infer U } ? U : never;\r\n\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunkMiddleware)));\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n\r\nexport default store;","import { RootState } from './redux-store';\r\n\r\nexport const getTotalCountMovies = (state: RootState) => {\r\n    return state.moviesPage.totalCountMovies;\r\n}\r\nexport const getMovies = (state: RootState) => {\r\n    return state.moviesPage.movies;\r\n}\r\n\r\nexport const getfilter = (state: RootState) => {\r\n    return state.moviesPage.filter;\r\n}\r\n\r\nexport const getCurrentPage = (state: RootState) => {\r\n    return state.moviesPage.currentPage;\r\n}\r\n\r\nexport const getErrorMessage = (state: RootState) => {\r\n    return state.moviesPage.errorMessage;\r\n}\r\n\r\nexport const selectFilmDescription = (state: RootState) => {\r\n    return state.moviesPage.filmDescription;\r\n}\r\n\r\nexport const selectLoading = (state: RootState) => {\r\n    return state.moviesPage.loading;\r\n}\r\n\r\n\r\n\r\n","import React from \"react\";\r\nimport \"antd/dist/antd.css\";\r\nimport { Spin } from \"antd\";\r\nimport { LoadingOutlined } from \"@ant-design/icons\";\r\nimport styled from 'styled-components/macro';\r\n\r\nconst PreloaderContainer = styled.div`\r\n    width: 100%;\r\n    height: 100%;\r\n    text-align: center;\r\n`;\r\n\r\n\r\nconst Preloader: React.FC = (props) => {\r\n    const antIcon = <LoadingOutlined style={{ fontSize: 48 }} spin />;\r\n    return (\r\n        <PreloaderContainer>\r\n            <Spin indicator={antIcon} />\r\n        </PreloaderContainer>\r\n    )\r\n}\r\n\r\nexport default Preloader;","import React from 'react';\r\nimport styled from 'styled-components/macro';\r\n\r\ntype PropType = {\r\n    title: string | undefined,\r\n    value: string ,\r\n}\r\n\r\nconst Row = styled.div`\r\n    display: flex;\r\n    text-align: left;\r\n    padding: 0px 15px;\r\n    \r\n    &:not(:first-child) {\r\n        margin-top: 15px;\r\n    }\r\n\r\n    @media (min-width: 501px) and (max-width: 800px) {\r\n        width: 80%;\r\n        justify-content: space-between;\r\n        margin: 0 auto;\r\n    }\r\n\r\n\r\n`;\r\n\r\nconst Title = styled.div`\r\n    color: grey;\r\n    width: 40%;\r\n    color: cadetblue;\r\n`;\r\n\r\nconst Value = styled.div`\r\n    width: 60%;\r\n    color: midnightblue;\r\n`;\r\n\r\n\r\nconst CharacterRow: React.FC<PropType> = ({ title, value }) => {\r\n\r\n    if (!value) { return null }\r\n\r\n    return (\r\n        <Row>\r\n            <Title>\r\n                {title}\r\n            </Title>\r\n            <Value>\r\n                {value}\r\n            </Value>\r\n        </Row>\r\n    )\r\n}\r\n\r\nexport default CharacterRow;","import styled from 'styled-components/macro';\r\n\r\nexport const Container = styled.div`\r\n    display: flex;\r\n    margin-top: 20px; \r\n    \r\n    @media screen and (max-width:900px) {\r\n        flex-direction: column;\r\n        align-items: center;\r\n    }\r\n`;\r\n\r\nexport const BodyContainer = styled.div`\r\n    padding: 20px 20px 50px 20px;\r\n    margin: 0 auto;\r\n    max-width: 1200px;\r\n    text-align: center;\r\n    background-color: white;\r\n    min-height: calc(100vh - 94px);\r\n`;\r\n\r\nexport const ErrorMessage = styled.div`\r\n    color: red;\r\n    font-size: 1.5em;\r\n    padding: 10px 20px;\r\n    border-radius: 10px;\r\n` \r\n\r\ntype PosterPropsType = {\r\n    margin?: string\r\n}\r\n\r\nexport const Poster = styled.img<PosterPropsType>`\r\n    height: 100%;\r\n    margin: ${props => props.margin};\r\n\r\n`;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { movieType } from '../../types/type';\r\nimport styled from 'styled-components/macro';\r\nimport CharacterRow from '../CharacterRow/CharacterRow';\r\nimport { Poster } from '../StyledComponets/StyledComponents';\r\n\r\nconst MovieContainer = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    justify-content: center;\r\n    box-shadow: 0px 5px 10px 2px rgba(34, 60, 80, 0.2);\r\n    cursor: pointer;\r\n    padding: 10px 0px;\r\n    transition: all 0.4s linear;\r\n    width: 330px;\r\n    min-height: 550px; \r\n    justify-content: space-around;\r\n    border: 1px solid transparent;\r\n    border-radius: 10px;\r\n\r\n    &:hover {\r\n       border: 1px solid #1890ff;\r\n    }\r\n`;\r\n\r\ntype PropType = { movie: movieType }\r\n\r\nconst Movie: React.FC<PropType> = ({ movie }) => {\r\n\r\n\r\n    return (\r\n        <Link to={`/film/${movie.imdbID}`} >\r\n            <MovieContainer>\r\n                <div>\r\n                <Poster src={movie.Poster} alt={`poster ${movie.Title}`} />\r\n                </div>\r\n                \r\n                <div style={{width: '75%', marginTop: '10px'}}>\r\n                    <CharacterRow title='Title:' value={movie.Title} />\r\n                    <CharacterRow title='Type:' value={movie.Type} />\r\n                    <CharacterRow title='Year:' value={movie.Year} />\r\n                    <CharacterRow title='imdbID:' value={movie.imdbID} />\r\n                </div>   \r\n            </MovieContainer>\r\n        </Link>\r\n    )\r\n}\r\n\r\nexport default React.memo(Movie);\r\n","import React, { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { getFilms } from \"../../redux/movies-reducer\";\r\nimport 'antd/dist/antd.css';\r\nimport { Form, Input, Button, Select } from 'antd';\r\nimport { getfilter } from \"../../redux/movies-selector\";\r\nconst { Option } = Select;\r\n\r\nconst SearchForm: React.FC = () => {\r\n    const dispatch = useDispatch();\r\n    const filter = useSelector(getfilter);\r\n    \r\n    const [form] = Form.useForm();\r\n\r\n    useEffect(() => {\r\n        form.setFieldsValue({\r\n            title: filter.title,\r\n            year: filter.year,\r\n            type: filter.type,\r\n        });\r\n    }, [filter, form]);\r\n\r\n    const onFinish = (values: any) => {\r\n        dispatch(getFilms(values, 1));\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Form onFinish={onFinish} \r\n            form={form}\r\n                initialValues={{\r\n                    title: filter.title,\r\n                    year: filter.year,\r\n                    type: filter.type,\r\n                }}\r\n            >\r\n                <Input.Group compact>\r\n                    <Form.Item name=\"title\" style={{maxWidth: '200px'}}\r\n                        rules={[\r\n                            {\r\n                                required: true,\r\n                                message: 'Please input title!',\r\n                            },\r\n                        ]}>\r\n                        <Input placeholder=\"title film\" />\r\n                    </Form.Item>\r\n                    <Form.Item name=\"year\" style={{maxWidth: '100px'}}\r\n                        rules={[\r\n                            {\r\n                                pattern: /^\\d+$/,\r\n                                message: 'Please enter year',\r\n                            }\r\n                            ]}>\r\n                        <Input placeholder='year'\r\n                         />\r\n                    </Form.Item>\r\n                    <Form.Item name=\"type\">\r\n                        <Select style={{ width: '100px'}}>\r\n                        <Option value=\"\">All</Option>\r\n                            <Option value=\"movie\">Movie</Option>\r\n                            <Option value=\"series\">Series</Option>\r\n                            <Option value=\"episode\">Episode</Option>\r\n                        </Select>\r\n                    </Form.Item>\r\n                    <Form.Item>\r\n                        <Button type=\"primary\" htmlType=\"submit\">\r\n                            Search\r\n                        </Button>\r\n                    </Form.Item>\r\n                </Input.Group>\r\n            </Form>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default SearchForm;","import { Pagination } from 'antd';\r\nimport React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getCurrentPage, getErrorMessage, getfilter, getTotalCountMovies, selectLoading, getMovies } from '../../redux/movies-selector';\r\nimport Preloader from '../common/Preloader/Preloader';\r\nimport Movie from './Movie';\r\nimport { getFilms } from '../../redux/movies-reducer';\r\nimport * as queryString from 'querystring';\r\nimport { useHistory } from 'react-router';\r\nimport SearchForm from '../Search/SearchForm';\r\nimport { v1 } from 'uuid';\r\nimport { ErrorMessage } from '../StyledComponets/StyledComponents';\r\nimport styled from 'styled-components/macro';\r\n\r\nconst MoviesWrapper = styled.div`\r\n    display: flex;\r\n    flex-direction: row;\r\n    flex-wrap: wrap;\r\n    justify-content: space-evenly;\r\n    grid-column-gap: 15px;\r\n    column-gap: 15px;\r\n    grid-row-gap: 15px;\r\n    row-gap: 15px;\r\n`\r\n\r\ntype QueryType = {\r\n    title?: string | undefined,\r\n    year?: string | undefined,\r\n    type?: 'movie' | 'series' | 'episode',\r\n    page?: string | undefined\r\n}\r\n\r\nconst Movies: React.FC = () => {\r\n\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    const filter = useSelector(getfilter);\r\n    const currentPage = useSelector(getCurrentPage);\r\n\r\n    useEffect(() => {\r\n        const parsed = queryString.parse(history.location.search.substr(1)) as QueryType;\r\n\r\n        let actualPage = currentPage;\r\n        let actualFilter = filter;\r\n\r\n        if (!!parsed.page) { actualPage = Number(parsed.page) };\r\n        if (!!parsed.title) { actualFilter = { ...actualFilter, title: parsed.title } };\r\n        if (!!parsed.year) { actualFilter = { ...actualFilter, year: parsed.year } };\r\n        if (!!parsed.type) { actualFilter = { ...actualFilter, type: parsed.type } };\r\n        if (actualFilter.title) {\r\n            dispatch(getFilms(actualFilter, actualPage));\r\n        }\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        const query: QueryType = {};\r\n        if (!!filter.title) query.title = filter.title;\r\n        if (!!filter.year) query.year = filter.year;\r\n        if (!!filter.type) query.type = filter.type;\r\n        if (currentPage !== 1) query.page = String(currentPage);\r\n        history.push({\r\n            search: queryString.stringify(query),\r\n        })\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [filter, currentPage])\r\n\r\n    let movies = useSelector(getMovies);\r\n    let loading = useSelector(selectLoading);\r\n    const totalCountMovies = Number(useSelector(getTotalCountMovies));\r\n    const errorMessage = useSelector(getErrorMessage);\r\n\r\n    const onChange = (page: number) => {\r\n        dispatch(getFilms(filter, page));\r\n    }\r\n\r\n    if (loading) {\r\n        return <Preloader />\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <SearchForm />\r\n            {movies && <MoviesWrapper>\r\n                {movies.map((movie) => (\r\n                    <Movie key={v1()} movie={movie} />\r\n                ))}\r\n            </MoviesWrapper>}\r\n\r\n            {movies && <Pagination\r\n                showQuickJumper={true}\r\n                current={currentPage}\r\n                defaultCurrent={1}\r\n                onChange={onChange}\r\n                total={totalCountMovies}\r\n                pageSize={10}\r\n                pageSizeOptions={[]}\r\n                style={{ marginTop: '30px' }}\r\n            />}\r\n            {errorMessage && <ErrorMessage>{errorMessage}</ErrorMessage>}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default React.memo(Movies);\r\n","import React from 'react';\r\nimport styled from 'styled-components/macro';\r\n\r\nconst FooterContainer = styled.footer`\r\n    display: flex;\r\n    height: 50px;\r\n    color: white;\r\n    background-color: black;\r\n    justify-content: center;\r\n    align-items: center;\r\n    font-size: 1.1em;\r\n`;\r\n\r\nconst Footer: React.FC = () => {\r\n    return (\r\n        <FooterContainer>\r\n            <span>&copy;&nbsp;Created by&nbsp;Vetchinov Vlad 2021&nbsp;|&nbsp;</span> \r\n            <a href=\"https://github.com/vetchinator/\" target=\"_blank\" rel=\"noreferrer\" >https://github.com</a>\r\n        </FooterContainer>\r\n    )\r\n}\r\n\r\nexport default Footer;\r\n","import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getFilmDescription } from '../../redux/movies-reducer';\r\nimport { selectFilmDescription } from '../../redux/movies-selector';\r\nimport { useHistory } from 'react-router';\r\nimport CharacterRow from '../CharacterRow/CharacterRow';\r\nimport { Button } from 'antd';\r\nimport { LeftOutlined } from '@ant-design/icons';\r\nimport { FilmDescType } from '../../types/type';\r\nimport Preloader from '../common/Preloader/Preloader';\r\nimport { Poster, Container } from '../StyledComponets/StyledComponents';\r\n\r\nconst MovieFullDescription: React.FC = () => {\r\n\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n\r\n    useEffect(() => {\r\n        const id = String(history.location.pathname.substr(6));\r\n        dispatch(getFilmDescription(id));\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps \r\n    }, []);\r\n\r\n    const filmDescription: FilmDescType = useSelector(selectFilmDescription);\r\n\r\n    const goToBack = () => {\r\n        history.goBack();\r\n    }\r\n\r\n    if (!filmDescription) {\r\n        return <Preloader />\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Button onClick={goToBack}> <LeftOutlined /> Back</Button>\r\n            <Container>\r\n                <Poster src={filmDescription.Poster} alt={`poster ${filmDescription.Title}`} margin={'0 10px'} />\r\n                <div>\r\n                    <CharacterRow title='Title' value={filmDescription.Title} />\r\n                    <CharacterRow title='Year' value={filmDescription.Year} />\r\n                    <CharacterRow title='Country' value={filmDescription.Country} />\r\n                    <CharacterRow title='Genre' value={filmDescription.Genre} />\r\n                    <CharacterRow title='Writer' value={filmDescription.Writer} />\r\n                    <CharacterRow title='Director' value={filmDescription.Director} />\r\n                    <CharacterRow title='Production' value={filmDescription.Production} />\r\n                    <CharacterRow title='Actors' value={filmDescription.Actors} />\r\n                    <CharacterRow title='Language' value={filmDescription.Language} />\r\n                    <CharacterRow title='Awards' value={filmDescription.Awards} />\r\n                    <CharacterRow title='Metascore' value={filmDescription.Metascore} />\r\n                    <CharacterRow title='Released' value={filmDescription.Released} />\r\n                    <CharacterRow title='Type' value={filmDescription.Type} />\r\n                    <CharacterRow title='DVD' value={filmDescription.DVD} />\r\n                    <CharacterRow title='BoxOffice' value={filmDescription.BoxOffice} />\r\n                    <CharacterRow title='Rated' value={filmDescription.Rated} />\r\n                    <CharacterRow title='Website' value={filmDescription.Website} />\r\n                    <CharacterRow title='Plot' value={filmDescription.Plot} />\r\n                    <CharacterRow title='imdbID' value={filmDescription.imdbID} />\r\n                    <CharacterRow title='imdbRating' value={filmDescription.imdbRating} />\r\n                    <CharacterRow title='imdbVotes' value={filmDescription.imdbVotes} />\r\n                    <CharacterRow title='Runtime' value={filmDescription.Runtime} />\r\n\r\n                    {filmDescription.Ratings && filmDescription.Ratings.map((rating) => \r\n                        <CharacterRow key={rating.Source} title={rating.Source} value={rating.Value} />\r\n                    )}\r\n                </div>\r\n            </Container>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default React.memo(MovieFullDescription);\r\n","import { createGlobalStyle } from 'styled-components';\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\nbody {\r\n    margin: 0;\r\n    padding: 0;\r\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\r\n        'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\r\n        sans-serif;\r\n    -webkit-font-smoothing: antialiased;\r\n    -moz-osx-font-smoothing: grayscale;\r\n    background-color: aliceblue;\r\n}\r\n\r\ncode {\r\n    font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New', monospace;\r\n}\r\n`;\r\n\r\nexport default GlobalStyle;","import { HashRouter, Route, Switch } from \"react-router-dom\";\r\nimport Header from './components/Header/Header';\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"./redux/redux-store\";\r\nimport React from 'react';\r\nimport Movies from './components/Movies/Movies';\r\nimport Footer from './components/Footer/Footer';\r\nimport MovieFullDescription from './components/Movies/MovieFullDescription';\r\nimport { BodyContainer } from './components/StyledComponets/StyledComponents';\r\nimport GlobalStyle from './components/StyledComponets/GlobalStyle';\r\n\r\nconst App: React.FC = () => {\r\n    return (\r\n        <>\r\n            <GlobalStyle />\r\n            <Header />\r\n            <BodyContainer>\r\n                <Switch>\r\n                    <Route exact path=\"/\" render={() => <Movies />} />\r\n                    <Route path=\"/film/:title\" render={() => <MovieFullDescription />} />\r\n                </Switch>\r\n            </BodyContainer>\r\n            <Footer />\r\n        </>\r\n    );\r\n}\r\n\r\nconst MainApp: React.FC = () => {\r\n    return (\r\n        <HashRouter>\r\n            <Provider store={store}>\r\n                <App />\r\n            </Provider>\r\n        </HashRouter>\r\n    );\r\n}\r\n\r\nexport default MainApp;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport MainApp from \"./App\";\r\n\r\nReactDOM.render(<MainApp />, document.getElementById('root'));\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}